<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:jdbc="http://www.springframework.org/schema/jdbc"
     xmlns:context="http://www.springframework.org/schema/context"
     xsi:schemaLocation="
     http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- 读取jdbc配置文件 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close" >
        <property name="driverClassName">
            <value>${jdbc.driver}</value>
        </property>
        <property name="url">
            <value>${jdbc.url}</value>
        </property>
        <property name="username">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>

        <!-- 连接池最大使用连接数 -->
        <property name="maxActive">
            <value>${jdbc.maxActive}</value>
        </property>
        <!-- 初始化连接大小 -->
        <property name="initialSize">
            <value>${jdbc.initialSize}</value>
        </property>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait">
            <value>${jdbc.maxWait}</value>
        </property>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle">
            <value>${jdbc.maxIdle}</value>
        </property>
        <!-- 连接池最小空闲 -->
        <property name="minIdle">
            <value>${jdbc.minIdle}</value>
        </property>
        <!-- 自动清除无用连接 -->
        <property name="removeAbandoned">
            <value>${jdbc.removeAbandoned}</value>
        </property>
        <!-- 清除无用连接的等待时间 -->
        <property name="removeAbandonedTimeout">
            <value>${jdbc.removeAbandonedTimeout}</value>
        </property>
        <!-- 连接属性 -->
        <property name="connectionProperties">
            <value>clientEncoding=UTF-8</value>
        </property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.e9cloud.mybatis.domain" />
        <property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml" />
        <property name="mapperLocations" value="classpath:com/e9cloud/mybatis/persistence/*.xml" />
    </bean>

    <!-- extending SqlSessionDaoSupport -->
    <bean id="baseDao" class="com.e9cloud.mybatis.base.BaseDaoImpl">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <!-- transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"></property>
        <property name="transactionAttributes">
            <props>
                <!-- PROPAGATION_SUPPORTS: 如果已经存在事务,则加入事务;如果没有事务,则以非事务的方式执行;
                PROPAGATION_MANDATORY: 使用当前事务, 如果没有, 则抛出异常;
                PROPAGATION_REQUIRED: 新建事务,如果当前有事务, 则挂起; P
                ROPAGATION_NOT_SUPPORTED:以非事务的方式执行, 如果当前有事务, 则挂起;
                PROPAGATION_NEVER:以非事务的方式执行, 如果当前有事务,则抛出异常;
                +/-Exception</prop> + 表示异常出现时事物提交 - 表示异常出现时事务回滚 -->
                <prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="query*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="count*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="page*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="modify*">PROPAGATION_REQUIRED</prop>
                <prop key="update*">PROPAGATION_REQUIRED</prop>
                <prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="create*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="drop*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="delete*">PROPAGATION_REQUIRED,-Exception</prop>
                <prop key="*Execute">PROPAGATION_REQUIRED,-Exception</prop>
            </props>
        </property>
    </bean>

    <!-- 用来定义那些类需要采用事物管理 spring 事物的动态代理类 BeanNameAutoProxyCreator 根据类名自动代理，接受表达式 -->
    <bean id="BeanProxy" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="beanNames">
            <!-- 对类名以Service结尾的类进行代理 -->
            <value>*Service*</value>
        </property>
        <!-- 对代理类进行加载拦截器(实现通知的过程) -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

</beans>
